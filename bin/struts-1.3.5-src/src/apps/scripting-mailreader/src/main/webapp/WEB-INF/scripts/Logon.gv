import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.util.ModuleException;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.struts.apps.scriptingmailreader.*;

form = struts.form;

def getUser(database, username, password, errors) {
    
    user = null;
    if (database == null){
        errors.add(
            ActionMessages.GLOBAL_MESSAGE,
            new ActionMessage("error.database.missing"));
    }
    else {
        user = database.findUser(username);
        if ((user != null) && !user.getPassword().equals(password)) {
            user = null;
        }
        if (user == null) {
            errors.add(
                ActionMessages.GLOBAL_MESSAGE,
                new ActionMessage("error.password.mismatch"));
        }
    }
    return user;
}

def saveUser(request, user) {
 
    session = request.getSession();
    session.setAttribute(Constants.USER_KEY, user);
    if (log.isDebugEnabled()) {
        log.debug(
            "LogonAction: User '"
                + user.getUsername()
                + "' logged on in session "
                + session.getId());
    }

}

// Local variables
errors = new ActionErrors();
username = PropertyUtils.getSimpleProperty(form, "username");
password = PropertyUtils.getSimpleProperty(form, "password");
database = application.getAttribute(Constants.DATABASE_KEY);

// Retrieve user
user = getUser(database,username,password,errors);

// Save (or clear) user object
saveUser(request,user);

// Report back any errors, and exit if any
if (!errors.isEmpty()) {
    struts.action.saveErrors(request, errors);
    struts.setForward(struts.mapping.getInputForward());
}

// Otherwise, return "success"
struts.setForwardName(Constants.SUCCESS);
